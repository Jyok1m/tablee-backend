#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("tabl-e-backend:server");
var http = require("http");

const ChatRoom = require("../models/chatRoom");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Parametrage Socket.io //

const generateID = () => Math.random().toString(36).substring(2, 10);

var io = require("socket.io")(server);
io.on("connection", function (socket) {
  //Message de connection d'un utilisateur
  console.log(`âš¡: ${socket.id} user just connected!`);

  //Reception d'un message du frontend
  socket.on("sendMessage", function (message) {
    console.log("recoit message socket back", message);
    //Renvoi le message vers le frontend
    io.emit("sendMessageFromBack", message);
  });

  //Message de dÃ©connection d'un utilisateur
  socket.on("disconnect", () => {
    socket.disconnect();
    console.log("ðŸ”¥: A user disconnected");
  });

  //Creation de nouveau chat
  socket.on("createRoom", (groupName) => {
    const newRoom = new ChatRoom({
      id: generateID(),
      name: groupName,
      messages: [],
    });
    newRoom.save().then((result) => {
      io.emit("room-created", result);
      console.log(result);
      socket.join(groupName);
      socket.emit("roomsList", groupName);
    });


      //Structure d'un message
      const newMessage = {
        id: generateID(),
        text: message,
        user,
        time: `${timestamp.hour}:${timestamp.mins}`,
      };
    });
  });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
